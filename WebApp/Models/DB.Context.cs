//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WebAppEntities : DbContext
    {
        public WebAppEntities()
            : base("name=WebAppEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUsersLoginHistory> AspNetUsersLoginHistories { get; set; }
        public virtual DbSet<AspNetUsersMenuPermission> AspNetUsersMenuPermissions { get; set; }
        public virtual DbSet<AspNetUsersPageVisited> AspNetUsersPageVisiteds { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<AspNetUsersMenu> AspNetUsersMenus { get; set; }
        public virtual DbSet<Option> Options { get; set; }
        public virtual DbSet<AspNetUsersProject> AspNetUsersProjects { get; set; }
        public virtual DbSet<AspNetUsersMenuControl> AspNetUsersMenuControls { get; set; }
        public virtual DbSet<AspNetUsersMenuPermissionControl> AspNetUsersMenuPermissionControls { get; set; }
        public virtual DbSet<AspNetUsersProfile> AspNetUsersProfiles { get; set; }
        public virtual DbSet<ApprovalStage> ApprovalStages { get; set; }
        public virtual DbSet<ApprovalStagesAuthorizer> ApprovalStagesAuthorizers { get; set; }
        public virtual DbSet<ApprovalTemplate> ApprovalTemplates { get; set; }
        public virtual DbSet<ApprovalTemplateModule> ApprovalTemplateModules { get; set; }
        public virtual DbSet<ApprovalTemplateOriginator> ApprovalTemplateOriginators { get; set; }
        public virtual DbSet<ApprovalTemplateStage> ApprovalTemplateStages { get; set; }
        public virtual DbSet<ChangeLog> ChangeLogs { get; set; }
        public virtual DbSet<VW_Projects> VW_Projects { get; set; }
        public virtual DbSet<CustomerProfile> CustomerProfiles { get; set; }
        public virtual DbSet<HolidayDimension> HolidayDimensions { get; set; }
        public virtual DbSet<VW_UnitType> VW_UnitType { get; set; }
        public virtual DbSet<VW_Phase> VW_Phase { get; set; }
        public virtual DbSet<VW_CustomerWithSO> VW_CustomerWithSO { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<EmailSendingQueue> EmailSendingQueues { get; set; }
        public virtual DbSet<TurnoverOption> TurnoverOptions { get; set; }
        public virtual DbSet<TurnoverStatu> TurnoverStatus { get; set; }
        public virtual DbSet<TurnoverStatusAcctType> TurnoverStatusAcctTypes { get; set; }
        public virtual DbSet<PunchlistCategory> PunchlistCategories { get; set; }
        public virtual DbSet<UnitQD_Qualification> UnitQD_Qualification { get; set; }
        public virtual DbSet<OccupancyPermit> OccupancyPermits { get; set; }
        public virtual DbSet<VW_OccupancyPermit> VW_OccupancyPermit { get; set; }
        public virtual DbSet<HttpClientLog> HttpClientLogs { get; set; }
        public virtual DbSet<UnitID_DeemedAcceptance> UnitID_DeemedAcceptance { get; set; }
        public virtual DbSet<UnitID_TOAcceptance> UnitID_TOAcceptance { get; set; }
        public virtual DbSet<UnitQD_TOSchedule> UnitQD_TOSchedule { get; set; }
        public virtual DbSet<UnitQD_NoticeTO> UnitQD_NoticeTO { get; set; }
        public virtual DbSet<UnitAcceptance> UnitAcceptances { get; set; }
        public virtual DbSet<VW_InspectionAcceptance> VW_InspectionAcceptance { get; set; }
        public virtual DbSet<VW_InspectionUnit> VW_InspectionUnit { get; set; }
        public virtual DbSet<VW_SalesInventory> VW_SalesInventory { get; set; }
        public virtual DbSet<VW_UnitInventory> VW_UnitInventory { get; set; }
        public virtual DbSet<VW_QualifiedUnit> VW_QualifiedUnit { get; set; }
        public virtual DbSet<UnitHD_HistoricalData> UnitHD_HistoricalData { get; set; }
        public virtual DbSet<VW_QualifiedTurnover> VW_QualifiedTurnover { get; set; }
        public virtual DbSet<VW_HistoricalUnit> VW_HistoricalUnit { get; set; }
        public virtual DbSet<VW_QualifyList> VW_QualifyList { get; set; }
        public virtual DbSet<TitlingLocation> TitlingLocations { get; set; }
        public virtual DbSet<TitlingStatusRemark> TitlingStatusRemarks { get; set; }
        public virtual DbSet<ElectricMeterDocument> ElectricMeterDocuments { get; set; }
        public virtual DbSet<DocumentaryRequirement> DocumentaryRequirements { get; set; }
        public virtual DbSet<SystemParameter> SystemParameters { get; set; }
        public virtual DbSet<SystemParameterLog> SystemParameterLogs { get; set; }
        public virtual DbSet<TitlingStatu> TitlingStatus { get; set; }
        public virtual DbSet<VW_TitlingStatus> VW_TitlingStatus { get; set; }
        public virtual DbSet<ProcessJob> ProcessJobs { get; set; }
        public virtual DbSet<ProcessTitlingStatusTemp> ProcessTitlingStatusTemps { get; set; }
        public virtual DbSet<VW_DashboardProcessingJob> VW_DashboardProcessingJob { get; set; }
        public virtual DbSet<ElectricMeterInvServiceDeposit> ElectricMeterInvServiceDeposits { get; set; }
        public virtual DbSet<ElectricMeter> ElectricMeters { get; set; }
        public virtual DbSet<VW_ElectricMeterInvServiceDeposit> VW_ElectricMeterInvServiceDeposit { get; set; }
        public virtual DbSet<ProcessElectricMeterTemp> ProcessElectricMeterTemps { get; set; }
        public virtual DbSet<VW_DashboardProcessingJobElectric> VW_DashboardProcessingJobElectric { get; set; }
        public virtual DbSet<VW_ElectricMeterStatus> VW_ElectricMeterStatus { get; set; }
        public virtual DbSet<VW_ChangeLog> VW_ChangeLog { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spPermissionControls(string roleID, string nvPageUrl)
        {
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            var nvPageUrlParameter = nvPageUrl != null ?
                new ObjectParameter("nvPageUrl", nvPageUrl) :
                new ObjectParameter("nvPageUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPermissionControls", roleIDParameter, nvPageUrlParameter);
        }
    
        public virtual int spProcessEmailQueueing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProcessEmailQueueing");
        }
    
        public virtual ObjectResult<Nullable<int>> spDateTimeChecker(Nullable<System.DateTime> date, Nullable<int> type)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spDateTimeChecker", dateParameter, typeParameter);
        }
    
        public virtual int spTransactionApplicability(Nullable<int> id, string module)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTransactionApplicability", idParameter, moduleParameter);
        }
    
        public virtual int spProcessBusinessRules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProcessBusinessRules");
        }
    
        public virtual ObjectResult<spDashboardSummary_Result> spDashboardSummary(string dashboardType, string projects)
        {
            var dashboardTypeParameter = dashboardType != null ?
                new ObjectParameter("DashboardType", dashboardType) :
                new ObjectParameter("DashboardType", typeof(string));
    
            var projectsParameter = projects != null ?
                new ObjectParameter("Projects", projects) :
                new ObjectParameter("Projects", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDashboardSummary_Result>("spDashboardSummary", dashboardTypeParameter, projectsParameter);
        }
    
        public virtual int spExecuteScript(string sql)
        {
            var sqlParameter = sql != null ?
                new ObjectParameter("sql", sql) :
                new ObjectParameter("sql", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spExecuteScript", sqlParameter);
        }
    
        public virtual int spDashboardProcessingJob()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDashboardProcessingJob");
        }
    }
}
